/* User application code loading tables for VS10xx */

#if 0
void LoadUserCode(void) {
  int i = 0;

  while (i<sizeof(plugin)/sizeof(plugin[0])) {
    unsigned short addr, n, val;
    addr = plugin[i++];
    n = plugin[i++];
    if (n & 0x8000U) { /* RLE run, replicate n samples */
      n &= 0x7FFF;
      val = plugin[i++];
      while (n--) {
        WriteVS10xxRegister(addr, val);
      }
    } else {           /* Copy run, copy n samples */
      while (n--) {
        val = plugin[i++];
        WriteVS10xxRegister(addr, val);
      }
    }
  }
}
#endif

#ifndef SKIP_PLUGIN_VARNAME
#define PLUGIN_SIZE 117
const unsigned short plugin[117] = { /* Compressed plugin */
#endif
  0x0007, 0x0001, 0x8f00, 0x0006, 0x0070, 0x2803, 0xc2c0, 0x0030, /*    0 */
  0x0697, 0x0fff, 0xfdc0, 0x3700, 0x4024, 0xb100, 0x0024, 0xbc82, /*    8 */
  0x3c00, 0x0030, 0x1297, 0x3f10, 0x0024, 0x3f00, 0x0024, 0x2803, /*   10 */
  0xc540, 0x0003, 0xc795, 0x0000, 0x0200, 0x3700, 0x4024, 0xc100, /*   18 */
  0x0024, 0x3f00, 0x0024, 0x0000, 0x0040, 0x0004, 0x07c1, 0x0003, /*   20 */
  0xc7d5, 0x0030, 0x1097, 0x3f70, 0x0024, 0x3f00, 0x4024, 0xf400, /*   28 */
  0x5540, 0x0000, 0x08d7, 0xf400, 0x57c0, 0x0007, 0x9257, 0x0000, /*   30 */
  0x0000, 0x3f00, 0x0024, 0x0030, 0x0297, 0x2000, 0x0000, 0x3f00, /*   38 */
  0x0024, 0x2a08, 0x2bce, 0x2a03, 0xc80e, 0x3e12, 0xb817, 0x3e14, /*   40 */
  0xf806, 0x3e00, 0xb804, 0x0030, 0x0317, 0x3701, 0x0024, 0x0030, /*   48 */
  0x10d7, 0x0030, 0x1293, 0xf148, 0x1c46, 0xa64c, 0x428a, 0x3700, /*   50 */
  0x8024, 0x2803, 0xcc11, 0xa244, 0x0024, 0xf168, 0x0024, 0x464c, /*   58 */
  0x0024, 0xf128, 0x0024, 0x4244, 0x0024, 0x3b11, 0x8024, 0x3b00, /*   60 */
  0x8024, 0x36f0, 0x9804, 0x36f4, 0xd806, 0x3602, 0x8024, 0x0030, /*   68 */
  0x0717, 0x2100, 0x0000, 0x3f05, 0xdbd7,
#ifndef SKIP_PLUGIN_VARNAME
};
#endif
